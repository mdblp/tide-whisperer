// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// DatabaseAdapter is an autogenerated mock type for the DatabaseAdapter type
type DatabaseAdapter struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *DatabaseAdapter) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Collection provides a mock function with given fields: collectionName, databaseName
func (_m *DatabaseAdapter) Collection(collectionName string, databaseName ...string) *mongo.Collection {
	_va := make([]interface{}, len(databaseName))
	for _i := range databaseName {
		_va[_i] = databaseName[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, collectionName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func(string, ...string) *mongo.Collection); ok {
		r0 = rf(collectionName, databaseName...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *DatabaseAdapter) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PingOK provides a mock function with given fields:
func (_m *DatabaseAdapter) PingOK() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *DatabaseAdapter) Start() {
	_m.Called()
}

// WaitUntilStarted provides a mock function with given fields:
func (_m *DatabaseAdapter) WaitUntilStarted() {
	_m.Called()
}

type NewDatabaseAdapterT interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabaseAdapter creates a new instance of DatabaseAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaseAdapter(t NewDatabaseAdapterT) *DatabaseAdapter {
	mock := &DatabaseAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
