// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	context "context"

	common "github.com/tidepool-org/tide-whisperer/common"

	mock "github.com/stretchr/testify/mock"
)

// PatientDataUseCase is an autogenerated mock type for the PatientDataUseCase type
type PatientDataUseCase struct {
	mock.Mock
}

// GetData provides a mock function with given fields: ctx, userID, traceID, startDate, endDate, withPumpSettings, sessionToken, buff
func (_m *PatientDataUseCase) GetData(ctx context.Context, userID string, traceID string, startDate string, endDate string, withPumpSettings bool, sessionToken string, buff *bytes.Buffer) *common.DetailedError {
	ret := _m.Called(ctx, userID, traceID, startDate, endDate, withPumpSettings, sessionToken, buff)

	var r0 *common.DetailedError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, bool, string, *bytes.Buffer) *common.DetailedError); ok {
		r0 = rf(ctx, userID, traceID, startDate, endDate, withPumpSettings, sessionToken, buff)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.DetailedError)
		}
	}

	return r0
}

type NewPatientDataUseCaseT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPatientDataUseCase creates a new instance of PatientDataUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPatientDataUseCase(t NewPatientDataUseCaseT) *PatientDataUseCase {
	mock := &PatientDataUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
