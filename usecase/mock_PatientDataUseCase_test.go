// Code generated by mockery v2.12.3. DO NOT EDIT.

package usecase

import (
	bytes "bytes"
	context "context"

	common "github.com/tidepool-org/tide-whisperer/common"

	mock "github.com/stretchr/testify/mock"
)

// MockPatientDataUseCase is an autogenerated mock type for the PatientDataUseCase type
type MockPatientDataUseCase struct {
	mock.Mock
}

type MockPatientDataUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPatientDataUseCase) EXPECT() *MockPatientDataUseCase_Expecter {
	return &MockPatientDataUseCase_Expecter{mock: &_m.Mock}
}

// GetData provides a mock function with given fields: ctx, args
func (_m *MockPatientDataUseCase) GetData(ctx context.Context, args GetDataArgs) (*bytes.Buffer, *common.DetailedError) {
	ret := _m.Called(ctx, args)

	var r0 *bytes.Buffer
	if rf, ok := ret.Get(0).(func(context.Context, GetDataArgs) *bytes.Buffer); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	var r1 *common.DetailedError
	if rf, ok := ret.Get(1).(func(context.Context, GetDataArgs) *common.DetailedError); ok {
		r1 = rf(ctx, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*common.DetailedError)
		}
	}

	return r0, r1
}

// MockPatientDataUseCase_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type MockPatientDataUseCase_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//  - ctx context.Context
//  - args GetDataArgs
func (_e *MockPatientDataUseCase_Expecter) GetData(ctx interface{}, args interface{}) *MockPatientDataUseCase_GetData_Call {
	return &MockPatientDataUseCase_GetData_Call{Call: _e.mock.On("GetData", ctx, args)}
}

func (_c *MockPatientDataUseCase_GetData_Call) Run(run func(ctx context.Context, args GetDataArgs)) *MockPatientDataUseCase_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetDataArgs))
	})
	return _c
}

func (_c *MockPatientDataUseCase_GetData_Call) Return(_a0 *bytes.Buffer, _a1 *common.DetailedError) *MockPatientDataUseCase_GetData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type NewMockPatientDataUseCaseT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPatientDataUseCase creates a new instance of MockPatientDataUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPatientDataUseCase(t NewMockPatientDataUseCaseT) *MockPatientDataUseCase {
	mock := &MockPatientDataUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
