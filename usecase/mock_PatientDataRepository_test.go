// Code generated by mockery v2.12.3. DO NOT EDIT.

package usecase

import (
	context "context"

	common "github.com/tidepool-org/tide-whisperer/common"

	mock "github.com/stretchr/testify/mock"

	mongo "github.com/tidepool-org/go-common/clients/mongo"

	schema "github.com/tidepool-org/tide-whisperer/schema"
)

// MockPatientDataRepository is an autogenerated mock type for the PatientDataRepository type
type MockPatientDataRepository struct {
	mock.Mock
}

type MockPatientDataRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPatientDataRepository) EXPECT() *MockPatientDataRepository_Expecter {
	return &MockPatientDataRepository_Expecter{mock: &_m.Mock}
}

// GetDataInDeviceData provides a mock function with given fields: ctx, traceID, userID, dates, excludeTypes
func (_m *MockPatientDataRepository) GetDataInDeviceData(ctx context.Context, traceID string, userID string, dates *common.Date, excludeTypes []string) (mongo.StorageIterator, error) {
	ret := _m.Called(ctx, traceID, userID, dates, excludeTypes)

	var r0 mongo.StorageIterator
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *common.Date, []string) mongo.StorageIterator); ok {
		r0 = rf(ctx, traceID, userID, dates, excludeTypes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.StorageIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *common.Date, []string) error); ok {
		r1 = rf(ctx, traceID, userID, dates, excludeTypes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPatientDataRepository_GetDataInDeviceData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataInDeviceData'
type MockPatientDataRepository_GetDataInDeviceData_Call struct {
	*mock.Call
}

// GetDataInDeviceData is a helper method to define mock.On call
//  - ctx context.Context
//  - traceID string
//  - userID string
//  - dates *common.Date
//  - excludeTypes []string
func (_e *MockPatientDataRepository_Expecter) GetDataInDeviceData(ctx interface{}, traceID interface{}, userID interface{}, dates interface{}, excludeTypes interface{}) *MockPatientDataRepository_GetDataInDeviceData_Call {
	return &MockPatientDataRepository_GetDataInDeviceData_Call{Call: _e.mock.On("GetDataInDeviceData", ctx, traceID, userID, dates, excludeTypes)}
}

func (_c *MockPatientDataRepository_GetDataInDeviceData_Call) Run(run func(ctx context.Context, traceID string, userID string, dates *common.Date, excludeTypes []string)) *MockPatientDataRepository_GetDataInDeviceData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*common.Date), args[4].([]string))
	})
	return _c
}

func (_c *MockPatientDataRepository_GetDataInDeviceData_Call) Return(_a0 mongo.StorageIterator, _a1 error) *MockPatientDataRepository_GetDataInDeviceData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDataRangeLegacy provides a mock function with given fields: ctx, traceID, userID
func (_m *MockPatientDataRepository) GetDataRangeLegacy(ctx context.Context, traceID string, userID string) (*common.Date, error) {
	ret := _m.Called(ctx, traceID, userID)

	var r0 *common.Date
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *common.Date); ok {
		r0 = rf(ctx, traceID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Date)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, traceID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPatientDataRepository_GetDataRangeLegacy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataRangeLegacy'
type MockPatientDataRepository_GetDataRangeLegacy_Call struct {
	*mock.Call
}

// GetDataRangeLegacy is a helper method to define mock.On call
//  - ctx context.Context
//  - traceID string
//  - userID string
func (_e *MockPatientDataRepository_Expecter) GetDataRangeLegacy(ctx interface{}, traceID interface{}, userID interface{}) *MockPatientDataRepository_GetDataRangeLegacy_Call {
	return &MockPatientDataRepository_GetDataRangeLegacy_Call{Call: _e.mock.On("GetDataRangeLegacy", ctx, traceID, userID)}
}

func (_c *MockPatientDataRepository_GetDataRangeLegacy_Call) Run(run func(ctx context.Context, traceID string, userID string)) *MockPatientDataRepository_GetDataRangeLegacy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPatientDataRepository_GetDataRangeLegacy_Call) Return(_a0 *common.Date, _a1 error) *MockPatientDataRepository_GetDataRangeLegacy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLatestBasalSecurityProfile provides a mock function with given fields: ctx, traceID, userID
func (_m *MockPatientDataRepository) GetLatestBasalSecurityProfile(ctx context.Context, traceID string, userID string) (*schema.DbProfile, error) {
	ret := _m.Called(ctx, traceID, userID)

	var r0 *schema.DbProfile
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *schema.DbProfile); ok {
		r0 = rf(ctx, traceID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.DbProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, traceID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPatientDataRepository_GetLatestBasalSecurityProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBasalSecurityProfile'
type MockPatientDataRepository_GetLatestBasalSecurityProfile_Call struct {
	*mock.Call
}

// GetLatestBasalSecurityProfile is a helper method to define mock.On call
//  - ctx context.Context
//  - traceID string
//  - userID string
func (_e *MockPatientDataRepository_Expecter) GetLatestBasalSecurityProfile(ctx interface{}, traceID interface{}, userID interface{}) *MockPatientDataRepository_GetLatestBasalSecurityProfile_Call {
	return &MockPatientDataRepository_GetLatestBasalSecurityProfile_Call{Call: _e.mock.On("GetLatestBasalSecurityProfile", ctx, traceID, userID)}
}

func (_c *MockPatientDataRepository_GetLatestBasalSecurityProfile_Call) Run(run func(ctx context.Context, traceID string, userID string)) *MockPatientDataRepository_GetLatestBasalSecurityProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPatientDataRepository_GetLatestBasalSecurityProfile_Call) Return(_a0 *schema.DbProfile, _a1 error) *MockPatientDataRepository_GetLatestBasalSecurityProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLoopMode provides a mock function with given fields: ctx, traceID, userID, dates
func (_m *MockPatientDataRepository) GetLoopMode(ctx context.Context, traceID string, userID string, dates *common.Date) ([]schema.LoopModeEvent, error) {
	ret := _m.Called(ctx, traceID, userID, dates)

	var r0 []schema.LoopModeEvent
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *common.Date) []schema.LoopModeEvent); ok {
		r0 = rf(ctx, traceID, userID, dates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.LoopModeEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *common.Date) error); ok {
		r1 = rf(ctx, traceID, userID, dates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPatientDataRepository_GetLoopMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoopMode'
type MockPatientDataRepository_GetLoopMode_Call struct {
	*mock.Call
}

// GetLoopMode is a helper method to define mock.On call
//  - ctx context.Context
//  - traceID string
//  - userID string
//  - dates *common.Date
func (_e *MockPatientDataRepository_Expecter) GetLoopMode(ctx interface{}, traceID interface{}, userID interface{}, dates interface{}) *MockPatientDataRepository_GetLoopMode_Call {
	return &MockPatientDataRepository_GetLoopMode_Call{Call: _e.mock.On("GetLoopMode", ctx, traceID, userID, dates)}
}

func (_c *MockPatientDataRepository_GetLoopMode_Call) Run(run func(ctx context.Context, traceID string, userID string, dates *common.Date)) *MockPatientDataRepository_GetLoopMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*common.Date))
	})
	return _c
}

func (_c *MockPatientDataRepository_GetLoopMode_Call) Return(_a0 []schema.LoopModeEvent, _a1 error) *MockPatientDataRepository_GetLoopMode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUploadData provides a mock function with given fields: ctx, traceID, uploadIds
func (_m *MockPatientDataRepository) GetUploadData(ctx context.Context, traceID string, uploadIds []string) (mongo.StorageIterator, error) {
	ret := _m.Called(ctx, traceID, uploadIds)

	var r0 mongo.StorageIterator
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) mongo.StorageIterator); ok {
		r0 = rf(ctx, traceID, uploadIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.StorageIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, traceID, uploadIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPatientDataRepository_GetUploadData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUploadData'
type MockPatientDataRepository_GetUploadData_Call struct {
	*mock.Call
}

// GetUploadData is a helper method to define mock.On call
//  - ctx context.Context
//  - traceID string
//  - uploadIds []string
func (_e *MockPatientDataRepository_Expecter) GetUploadData(ctx interface{}, traceID interface{}, uploadIds interface{}) *MockPatientDataRepository_GetUploadData_Call {
	return &MockPatientDataRepository_GetUploadData_Call{Call: _e.mock.On("GetUploadData", ctx, traceID, uploadIds)}
}

func (_c *MockPatientDataRepository_GetUploadData_Call) Run(run func(ctx context.Context, traceID string, uploadIds []string)) *MockPatientDataRepository_GetUploadData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockPatientDataRepository_GetUploadData_Call) Return(_a0 mongo.StorageIterator, _a1 error) *MockPatientDataRepository_GetUploadData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type NewMockPatientDataRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPatientDataRepository creates a new instance of MockPatientDataRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPatientDataRepository(t NewMockPatientDataRepositoryT) *MockPatientDataRepository {
	mock := &MockPatientDataRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
